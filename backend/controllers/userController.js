import asyncHandler from 'express-async-handler';
import generateToken from '../utlities/generateJwtTokens.js';
import User from '../models/userModel.js';

// @description: Authorize the user and also be able to get the token generated by JWT
// @route: POST Request to the users token
//@acesss: Public-> meaning anyone can hit this route
const authorizeUser = asyncHandler(async (request, response) => {
    const { email, password } = request.body;

    const user = await User.findOne({ email });

    if(user && (await user.matchPassword(password))) {
        response.json({
            _id: user._id,
            name: user.name, 
            email: user.email, 
            isAdmin: user.isAdmin,
            token: generateToken(user._id),
        });
    }
    else {
        response.status(401); //Not authroized
        throw new Error('Invalid email or password');
    }

});

// @description: Register a new user
// @route: POST Request to the users creation
//@acesss: Public-> meaning anyone can hit this route
const registerUser = asyncHandler(async (request, response) => {
    const { name, email, password } = request.body;

    const userExists = await User.findOne({ email });

    if(userExists) {
        response.status(400);
        throw new Error('User already exists');
    }

    const user = await User.create({
        name, 
        email, 
        password
    })

    if(user) {
        response.status(201).json({
            _id: user._id,
            name: user.name, 
            email: user.email, 
            isAdmin: user.isAdmin,
            token: generateToken(user._id),
        });
    } else {
        response.status(400);
        throw new Error('Invalid user data');
    }

});



// @description: Retrieveing the user profile
// @route: GET Request to the users profile
//@acesss: Private-> protected route not to the public
const getUserProfile = asyncHandler(async (request, response) => {
    const user = await User.findById(request.user._id);

    if(user) {
        response.json({
            _id: user._id,
            name: user.name, 
            email: user.email, 
            isAdmin: user.isAdmin,
        });
    }
    else {
        response.status(404);
        throw new Error('The user is not found');
    }
});



// @description: Updating the user profile
// @route: PUT Request to the users profile for updating
//@acesss: Private-> protected route not to the public
const updateUserProfile = asyncHandler(async (request, response) => {
    const user = await User.findById(request.user._id);

    if(user) {
        user.name = request.body.name || user.name;
        user.email = request.body.email || user.email; 
        if(request.body.password) {
            user.password = request.body.password;
           }

        const updatedUser = await user.save();

        response.json({
            _id: updatedUser._id,
            name: updatedUser.name, 
            email: updatedUser.email, 
            isAdmin: updatedUser.isAdmin,
            token: generateToken(updateUser._id),
        });
    }
    else {
        response.status(404);
        throw new Error('The user is not found');
    }
});


// @description: Retrieveing all of the users in the database
// @route: GET Request to the all the users 
//@acesss: Private-> protected route not to the public
const getUsers = asyncHandler(async (request, response) => {
    const users = await User.find({});

    response.json(users);
});

// @description: Deleteting the user from the database by their ID
// @route: DELETE Request to the specifed user
//@acesss: Private-> protected route not to the public
const deleteUser = asyncHandler(async (request, response) => {
    const user = await User.findById(request.params.id);

    if(user) {
        await user.remove();
        response.json({ message: 'User deleted from the database' });
    }
    else {
        response.status(404);
        throw new Error('Teh user is not found');
    }
});

// @description: Retrieveing the user by ID
// @route: GET Request to the user b it's ID
//@acesss: Private-> protected route not to the public
const getUserById = asyncHandler(async (request, response) => {
    const user = await User.findById(request.params.id).select('-password');
    if(user) {
        response.json(user);
    }
    else {
        response.status(404);
        throw new Error('The user is not found');
    }
    
});


// @description: Updating the user profile for the Admin
// @route: PUT Request to the users profile for updating
//@acesss: Private-> protected route not to the public
const updateUser = asyncHandler(async (request, response) => {
    const user = await User.findById(request.params.id);

    if(user) {
        user.name = request.body.name || user.name;
        user.email = request.body.email || user.email; 
        user.isAdmin = request.body.isAdmin; 

        const updatedUser = await user.save();

        response.json({
            _id: updatedUser._id,
            name: updatedUser.name, 
            email: updatedUser.email, 
            isAdmin: updatedUser.isAdmin,
        });
    }
    else {
        response.status(404);
        throw new Error('The user is not found');
    }
});

export { authorizeUser, getUserProfile, registerUser, updateUserProfile, getUsers, deleteUser, getUserById, updateUser };