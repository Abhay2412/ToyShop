import asyncHandler from 'express-async-handler';
import generateToken from '../utlities/generateJwtTokens.js';
import User from '../models/userModel.js';

// @description: Authorize the user and also be able to get the token generated by JWT
// @route: POST Request to the users token
//@acesss: Public-> meaning anyone can hit this route
const authorizeUser = asyncHandler(async (request, response) => {
    const { email, password } = request.body;

    const user = await User.findOne({ email });

    if(user && (await user.matchPassword(password))) {
        response.json({
            _id: user._id,
            name: user.name, 
            email: user.email, 
            isAdmin: user.isAdmin,
            token: generateToken(user._id),
        })
    }
    else {
        response.status(401); //Not authroized
        throw new Error('Invalid email or password');
    }

});

// @description: Register a new user
// @route: POST Request to the users creation
//@acesss: Public-> meaning anyone can hit this route
const registerUser = asyncHandler(async (request, response) => {
    const { name, email, password } = request.body;

    const userExists = await User.findOne({ email });

    if(userExists) {
        response.status(400);
        throw new Error('User already exists');
    }

    const user = await User.create({
        name, 
        email, 
        password
    })

    if(user) {
        response.status(201).json({
            _id: user._id,
            name: user.name, 
            email: user.email, 
            isAdmin: user.isAdmin,
            token: generateToken(user._id),
        })
    } else {
        response.status(400);
        throw new Error('Invalid user data');
    }

})



// @description: Retrieveing the user profile
// @route: GET Request to the users profile
//@acesss: Private-> protected route not to the public
const getUserProfile = asyncHandler(async (request, response) => {
    const user = await User.findById(request.user._id);

    if(user) {
        response.json({
            _id: user._id,
            name: user.name, 
            email: user.email, 
            isAdmin: user.isAdmin,
        })
    }
    else {
        response.status(404);
        throw new Error('The user is not found');
    }
})




export { authorizeUser, getUserProfile, registerUser };